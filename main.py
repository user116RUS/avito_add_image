import os
import time
import xml.etree.ElementTree as ET
import requests
from PIL import Image as PILImage
import pandas as pd
from io import BytesIO
from urllib.parse import urlparse
from datetime import datetime
import schedule
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
import openpyxl
from openpyxl.drawing.image import Image
from pathlib import Path
import uuid
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
XML_URL = "https://media.cm.expert/stock/export/cmexpert/avito.ru/all/all/d55d8ef7288a43a9824c95ca76ef7767.xml"
LOCAL_XML_PATH = "avito_cmexpert.xml"
OUTPUT_EXCEL_PATH = "avito_cmexpert_new.xlsx"
GOOGLE_CRED_PATH = "google_cred.json"
MAX_ITEMS = 99999 # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
IMAGES_FOLDER_NAME = "avito_images"  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ Google Drive

# –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
NEW_DESCRIPTION = """</p><p><strong>–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –Ω–∞ –í–æ–ª–Ω—è–Ω—Å–∫–æ–≥–æ</strong> - –±–æ–ª–µ–µ 10 000 –≤ –Ω–∞–ª–∏—á–∏–∏ + –ª—é–±—ã–µ –ø–æ–¥ –∑–∞–∫–∞–∑. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏!</p>
<p>‚úî –£ –Ω–∞—Å –¥–µ—à–µ–≤–ª–µ, —á–µ–º –≤ –∫—Ä—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞—Ö<br /> ‚úî –ì–∞—Ä–∞–Ω—Ç–∏—è –¥–æ 3-—Ö –ª–µ—Ç (—Å—Ä–æ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∏–¥–∞ –∏ –±—Ä–µ–Ω–¥–∞ –∑–∞–ø—á–∞—Å—Ç–∏)<br /> ‚úî –ë—ã—Å—Ç—Ä—ã–π –∏ –ª–µ–≥–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ –∏–∑ –Ω–∞–ª–∏—á–∏—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è<br /> ‚úî –î–∏—Å–∫–æ–Ω—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π 7% –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 —Ç—ã—Å. —Ä—É–±.<br /> ‚úî –ù–∞–π–¥–µ–º –∑–∞–ø—á–∞—Å—Ç–∏ –¥–∞–∂–µ –±–µ–∑ –≤–∏–Ω!<br /> <br /> <strong>üì£–°–∫–∏–¥–∫–∞ 5%</strong> –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ –∞–¥—Ä–µ—Å—É: –≥.–¢—É–ª–∞, —É–ª. –í–æ–ª–Ω—è–Ω—Å–∫–æ–≥–æ, 1. (–∫—Ä–æ–º–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ Avito)</p>
<p>üöö<strong>–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§</strong> —á–µ—Ä–µ–∑ –ê–≤–∏—Ç–æ: –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏, –°–î–≠–ö, Boxberry<br /> + –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞<br /> + –ù–∞–¥–µ–∂–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ (–Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–≤—Ä–µ–¥–∏—Ç—Å—è)<br /> + –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ + –≥–∞—Ä–∞–Ω—Ç–∏—è</p>
<p>‚ùóÔ∏è‚ùóÔ∏è<strong>–ù–µ –∑–Ω–∞–µ—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –∫–∞–∫–∞—è –∑–∞–ø—á–∞—Å—Ç—å —Ç–æ—á–Ω–æ –Ω—É–∂–Ω–∞?</strong><br /> –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–ø—á–∞—Å—Ç–∏, –º—ã –ø–æ–¥–±–µ—Ä–µ–º –Ω—É–∂–Ω—É—é –∑–∞–ø—á–∞—Å—Ç—å</p>
<p>üìû–ó–≤–æ–Ω–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —á–∞—Ç, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –Ω–∞–ª–∏—á–∏—é –∑–∞–ø—á–∞—Å—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–π –¥–µ—Ç–∞–ª–∏ –Ω–µ—Ç, –¥–æ—Å—Ç–∞–≤–∏–º –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ 2 —á–∞—Å–∞ (–∫—Ä—É–ø–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–æ 2-—Ö –¥–Ω).</p>"""

# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
OVERLAY_IMAGES = [
    "images/1.png",
    "images/2.png",
    "images/3.png",
    "images/4.png",
    "images/5.png",
    "images/6.png"
]

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
WATERMARK_PATH = "images/1.png"

# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –º–∞–≥–∞–∑–∏–Ω–∞
SHOP_IMAGES = [
    "shop/photo_1_2025-04-10_16-52-54.jpg",
    "shop/photo_3_2025-04-10_16-52-54.jpg",
    "shop/photo_7_2025-04-10_16-52-54.jpg"
]

def download_xml(max_retries=5, retry_delay=10):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ XML-—Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    
    max_retries: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    retry_delay: –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    for attempt in range(1, max_retries + 1):
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π User-Agent, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
                'Connection': 'keep-alive'
            }
            
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ {max_retries} –∑–∞–≥—Ä—É–∑–∏—Ç—å XML-—Ñ–∞–π–ª...")
            response = requests.get(XML_URL, headers=headers, timeout=60)
            
            if response.status_code == 200:
                with open(LOCAL_XML_PATH, 'wb') as f:
                    f.write(response.content)
                print(f"XML-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {LOCAL_XML_PATH}")
                return True
            elif response.status_code == 429:
                # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 429, –∂–¥–µ–º –¥–æ–ª—å—à–µ
                wait_time = retry_delay * attempt
                print(f"–û—à–∏–±–∫–∞ 429 (Too Many Requests). –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(wait_time)
            else:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ XML-—Ñ–∞–π–ª–∞. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                if attempt < max_retries:
                    print(f"–û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(retry_delay)
                
        except Exception as e:
            print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ XML-—Ñ–∞–π–ª–∞: {e}")
            if attempt < max_retries:
                print(f"–û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(retry_delay)
    
    # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    print("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ XML –∏—Å—á–µ—Ä–ø–∞–Ω—ã.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è XML-—Ñ–∞–π–ª–∞
    if os.path.exists(LOCAL_XML_PATH):
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞: {LOCAL_XML_PATH}")
        return True
    
    return False

def create_output_dir():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    output_dir = "processed_images"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    return output_dir

def overlay_image(base_image_url, overlay_path, output_path):
    """–ù–∞–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω"""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        response = requests.get(base_image_url)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {base_image_url}, –∫–æ–¥: {response.status_code}")
            return None
            
        base_img = PILImage.open(BytesIO(response.content)).convert("RGBA")
        
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGBA
        overlay_img = PILImage.open(overlay_path).convert("RGBA")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        base_width, base_height = base_img.size
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞–ª–æ–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        overlay_width, overlay_height = overlay_img.size
        ratio = min(base_width / overlay_width, base_height / overlay_height)
        new_overlay_width = int(overlay_width * ratio)
        new_overlay_height = int(overlay_height * ratio)
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        overlay_img = overlay_img.resize((new_overlay_width, new_overlay_height), PILImage.LANCZOS)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º, –∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ —Å–º–µ—â–∞–µ–º –≤–Ω–∏–∑
        paste_x = (base_width - new_overlay_width) // 2
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è - —Å—Ç–∞–≤–∏–º 0 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–ø—É—Å–∫–∞–Ω–∏—è –≤–Ω–∏–∑
        bottom_margin = 0  # –û—Ç—Å—Ç—É–ø –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        paste_y = base_height - new_overlay_height - bottom_margin
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã—à–ª–æ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        if paste_y < 0:
            paste_y = 0
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        result = PILImage.new("RGBA", base_img.size, (0, 0, 0, 0))
        result.paste(base_img, (0, 0))
        result.paste(overlay_img, (paste_x, paste_y), overlay_img)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JPEG
        result = result.convert("RGB")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result.save(output_path)
        return output_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return None

def add_shop_image(base_image_url, shop_image_path, output_path):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ –≤ –≤–∏–¥–µ –∫–æ–ª–ª–∞–∂–∞"""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        response = requests.get(base_image_url)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {base_image_url}, –∫–æ–¥: {response.status_code}")
            return None
            
        base_img = PILImage.open(BytesIO(response.content)).convert("RGB")
        
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
        shop_img = PILImage.open(shop_image_path).convert("RGB")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        base_width, base_height = base_img.size
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∫–æ–ª–ª–∞–∂, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—Ä–æ–∫–æ–µ –¥–ª—è –¥–≤—É—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        # –®–∏—Ä–∏–Ω–∞ = —à–∏—Ä–∏–Ω–∞ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è * 2 (—Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º)
        # –í—ã—Å–æ—Ç–∞ = –≤—ã—Å–æ—Ç–∞ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        collage_width = base_width * 2 + 20  # 20 –ø–∏–∫—Å–µ–ª–µ–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        collage_height = base_height
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞, —á—Ç–æ–±—ã –æ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ –≤—ã—Å–æ—Ç–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        shop_width, shop_height = shop_img.size
        new_shop_height = base_height
        new_shop_width = int(shop_width * (new_shop_height / shop_height))
        shop_img = shop_img.resize((new_shop_width, new_shop_height), PILImage.LANCZOS)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂ (–±–µ–ª—ã–π —Ñ–æ–Ω)
        collage = PILImage.new("RGB", (collage_width, collage_height), (255, 255, 255))
        
        # –†–∞–∑–º–µ—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–µ–≤–∞
        collage.paste(base_img, (0, 0))
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ —Å–ø—Ä–∞–≤–∞
        collage.paste(shop_img, (base_width + 20, 0))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        collage.save(output_path)
        return output_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–∞–∂–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

def upload_image_to_gdrive(drive_service, file_path, max_retries=3, retry_delay=5):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ Google Drive –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
    
    drive_service: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å Google Drive API
    file_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
    max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    """
    print(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ {file_path} –Ω–∞ Google Drive")
    
    if drive_service is None:
        print("–û–®–ò–ë–ö–ê: drive_service is None - —Å–µ—Ä–≤–∏—Å Google Drive –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None
        
    if not os.path.exists(file_path):
        print(f"–û–®–ò–ë–ö–ê: –§–∞–π–ª {file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return None
        
    for attempt in range(1, max_retries + 1):
        try:
            file_name = os.path.basename(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            folder_id = None
            try:
                print(f"–ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ {IMAGES_FOLDER_NAME} –Ω–∞ Google Drive")
                response = drive_service.files().list(
                    q=f"name='{IMAGES_FOLDER_NAME}' and mimeType='application/vnd.google-apps.folder' and trashed=false",
                    spaces='drive',
                    fields='files(id, name)'
                ).execute()
                
                if not response.get('files'):
                    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    print(f"–ü–∞–ø–∫–∞ {IMAGES_FOLDER_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é")
                    folder_metadata = {
                        'name': IMAGES_FOLDER_NAME,
                        'mimeType': 'application/vnd.google-apps.folder'
                    }
                    folder = drive_service.files().create(
                        body=folder_metadata,
                        fields='id'
                    ).execute()
                    folder_id = folder.get('id')
                    print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ —Å ID: {folder_id}")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–∞–ø–∫–∏
                    drive_service.permissions().create(
                        fileId=folder_id,
                        body={
                            'type': 'anyone',
                            'role': 'writer',  # –∏–∑–º–µ–Ω–µ–Ω–æ —Å 'reader' –Ω–∞ 'writer'
                        }
                    ).execute()
                    print("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    folder_id = response.get('files')[0].get('id')
                    print(f"–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞–ø–∫–∞ —Å ID: {folder_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–∞–ø–∫–æ–π –Ω–∞ Google Drive: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –∫–æ—Ä–µ–Ω—å
                folder_id = None
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –∏–ª–∏ –∫–æ—Ä–µ–Ω—å
            file_metadata = {
                'name': file_name
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞/–ø–æ–ª—É—á–µ–Ω–∞
            if folder_id:
                file_metadata['parents'] = [folder_id]
                print(f"–§–∞–π–ª –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–ø–∫—É {folder_id}")
            else:
                print("–§–∞–π–ª –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
            print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ {file_path} –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            media = MediaFileUpload(file_path, resumable=True, chunksize=1024*1024)
            print("–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
            file = drive_service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id'
            ).execute()
            
            file_id = file.get('id')
            print(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Å ID: {file_id}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞
            print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ñ–∞–π–ª–∞")
            drive_service.permissions().create(
                fileId=file_id,
                body={
                    'type': 'anyone',
                    'role': 'writer',  # –∏–∑–º–µ–Ω–µ–Ω–æ —Å 'reader' –Ω–∞ 'writer'
                }
            ).execute()
            print("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            # –§–æ—Ä–º–∞—Ç –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ Google Drive
            direct_url = f"https://drive.google.com/uc?export=view&id={file_id}"
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: {direct_url}")
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            return direct_url
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ Google Drive (–ø–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ {max_retries}): {e}")
            import traceback
            traceback.print_exc()
            if attempt < max_retries:
                print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(retry_delay)
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {file_path} –Ω–∞ Google Drive –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.")
    return None

def process_images(ad_element, output_dir, ad_id, gdrive_service=None, shop_image_path=None):
    """–°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive"""
    print(f"–°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {ad_id}")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    images = ad_element.findall(".//Image")
    
    if not images:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_section = ad_element.find("Images")
        if images_section is not None:
            images = images_section.findall("Image")
            if images:
                print(f"–ù–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Images/Image: {len(images)}")
    
    if not images:
        print(f"–î–ª—è {ad_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ XML")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ url
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç Images –∏ —á—Ç–æ –≤ –Ω–µ–º
            images_section = ad_element.find("Images")
            if images_section is not None:
                print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ Images –¥–ª—è {ad_id}:")
                for child in images_section:
                    if 'url' in child.attrib:
                        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                        original_urls = [child.attrib['url'] for child in images_section if 'url' in child.attrib]
                        print(f"–ù–∞–π–¥–µ–Ω—ã URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—ã: {original_urls}")
                        return original_urls
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö: {e}")
            import traceback
            traceback.print_exc()
        
        return []  # –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    original_urls = []  # –°–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    # –°–±–æ—Ä –≤—Å–µ—Ö URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for i, img in enumerate(images):
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
        img_url = img.text
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞
        if not img_url and 'url' in img.attrib:
            img_url = img.attrib['url']
            
        if img_url:
            original_urls.append(img_url)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(original_urls)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {ad_id}")
    return original_urls

def process_image_urls(original_urls, output_dir, ad_id, gdrive_service=None, shop_image_path=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if not original_urls:
        return []

    processed_urls = []  # –°–ø–∏—Å–æ–∫ URL –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for i, img_url in enumerate(original_urls):
        if not img_url:
            continue

        # –ü–µ—Ä–≤—ã–µ 6 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive
        if i < 6:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output_filename = f"{ad_id}_{i+1}.jpg"
            output_path = os.path.join(output_dir, output_filename)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å add_shop_image –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if i == 0 and shop_image_path and os.path.exists(shop_image_path):
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_id}")
                result_path = add_shop_image(img_url, shop_image_path, output_path)
            else:
                # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–≤–µ—Ä–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                overlay_index = i % len(OVERLAY_IMAGES)
                overlay_path = OVERLAY_IMAGES[overlay_index]
                print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º overlay {overlay_path} –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1} –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_id}")
                
                result_path = overlay_image(img_url, overlay_path, output_path)
            
            if result_path:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Google Drive, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
                if gdrive_service:
                    try:
                        print(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {output_filename} –Ω–∞ Google Drive")
                        file_url = upload_image_to_gdrive(gdrive_service, result_path)
                        if file_url:
                            processed_urls.append(file_url)
                            print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {output_filename} –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Google Drive: {file_url}")
                        else:
                            print(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {output_filename}")
                            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                            processed_urls.append(output_path)
                    except Exception as e:
                        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Google Drive: {e}")
                        import traceback
                        traceback.print_exc()
                        # –í —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                        processed_urls.append(output_path)
                else:
                    # –ï—Å–ª–∏ Google Drive –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                    processed_urls.append(output_path)
                    print(f"Google Drive –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {output_path}")
        else:
            # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ 6-–≥–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processed_urls.append(img_url)
            print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –∏—Å—Ö–æ–¥–Ω—ã–º URL –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {img_url}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç–æ (–º–∞–∫—Å–∏–º—É–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    remaining_slots = 10 - len(processed_urls)
    if remaining_slots > 0 and SHOP_IMAGES:
        print(f"–û—Å—Ç–∞–ª–æ—Å—å {remaining_slots} —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω–∞, —Å–∫–æ–ª—å–∫–æ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è
        shop_images_to_add = min(remaining_slots, len(SHOP_IMAGES))
        print(f"–î–æ–±–∞–≤–ª—è–µ–º {shop_images_to_add} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω–∞")
        
        for i in range(shop_images_to_add):
            shop_img_path = SHOP_IMAGES[i]
            shop_output_path = os.path.join(output_dir, f"{ad_id}_shop_{i+1}.jpg")
            
            try:
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –º–∞–≥–∞–∑–∏–Ω–∞
                with open(shop_img_path, 'rb') as src, open(shop_output_path, 'wb') as dst:
                    dst.write(src.read())
                print(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ {shop_img_path} -> {shop_output_path}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ Google Drive, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                if gdrive_service:
                    try:
                        shop_url = upload_image_to_gdrive(gdrive_service, shop_output_path)
                        if shop_url:
                            processed_urls.append(shop_url)
                            print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Google Drive: {shop_url}")
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                            processed_urls.append(shop_output_path)
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ Google Drive, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –≤ Google Drive: {e}")
                        processed_urls.append(shop_output_path)
                else:
                    processed_urls.append(shop_output_path)
                    print(f"Google Drive –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: {shop_output_path}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_img_path}: {e}")
    
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {ad_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {processed_urls}")
    return processed_urls

def resize_image(image_path, max_size=160):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω, —á—Ç–æ–±—ã –Ω–∞–∏–±–æ–ª—å—à–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –±—ã–ª–∞ max_size –ø–∏–∫—Å–µ–ª–µ–π.
    """
    with PILImage.open(image_path) as img:
        ratio = min(max_size / img.width, max_size / img.height)
        new_size = (int(img.width * ratio), int(img.height * ratio))
        resized_img = img.resize(new_size, PILImage.LANCZOS)
        return resized_img

def save_to_excel(df, output_path=OUTPUT_EXCEL_PATH):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DataFrame –≤ Excel-—Ñ–∞–π–ª"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª Excel
    if os.path.exists(output_path):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        existing_data = pd.read_excel(output_path)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        merged_df = existing_data.copy()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ df –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ Id
        if 'Id' in df.columns and 'Id' in existing_data.columns:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Id
            existing_ids = set(existing_data['Id'].astype(str).tolist())
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
            new_rows = df[~df['Id'].astype(str).isin(existing_ids)]
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–Ω–µ—Ü —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
            if len(new_rows) > 0:
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(new_rows)} –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º {len(existing_data)}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω–µ—Ü
                merged_df = pd.concat([existing_data, new_rows], ignore_index=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                merged_df.to_excel(output_path, index=False)
                
                return output_path, True  # –§–∞–π–ª –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
            else:
                print("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                return output_path, False  # –§–∞–π–ª –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
        else:
            print("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'Id' –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            # –ï—Å–ª–∏ –Ω–µ—Ç Id –≤ –æ–¥–Ω–æ–º –∏–∑ DataFrame, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω–µ—Ü
            merged_df = pd.concat([existing_data, df], ignore_index=True)
            merged_df.to_excel(output_path, index=False)
            return output_path, True  # –§–∞–π–ª –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        df.to_excel(output_path, index=False)
        print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª: {output_path}")
        return output_path, True  # –§–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω

def upload_to_google_drive(file_path, force_update=True):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç
    
    file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    force_update: –µ—Å–ª–∏ True, —Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω;
                  –µ—Å–ª–∏ False, —Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω
    """
    try:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        credentials = service_account.Credentials.from_service_account_file(
            GOOGLE_CRED_PATH, 
            scopes=['https://www.googleapis.com/auth/drive']
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Drive API
        drive_service = build('drive', 'v3', credentials=credentials)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ Google Drive
        file_name = os.path.basename(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        response = drive_service.files().list(
            q=f"name='{file_name}' and trashed=false",
            spaces='drive',
            fields='files(id, name)'
        ).execute()
        
        file_id = None
        
        if not response.get('files'):
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            file_metadata = {
                'name': file_name,
                'mimeType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            }
            media = MediaFileUpload(file_path, resumable=True)
            file = drive_service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id'
            ).execute()
            file_id = file.get("id")
            print(f'–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Google Drive, ID: {file_id}')
        else:
            # –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            file_id = response.get('files')[0].get('id')
            
            if force_update:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                media = MediaFileUpload(file_path, resumable=True)
                file = drive_service.files().update(
                    fileId=file_id,
                    media_body=media,
                    fields='id'
                ).execute()
                print(f'–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ Google Drive, ID: {file_id}')
            else:
                print(f'–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–∞ Google Drive, ID: {file_id}')
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
        drive_service.permissions().create(
            fileId=file_id,
            body={
                'type': 'anyone',
                'role': 'writer',  # –∏–∑–º–µ–Ω–µ–Ω–æ —Å 'reader' –Ω–∞ 'writer'
            }
        ).execute()
        print(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞')
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç
        file_url = f"https://docs.google.com/spreadsheets/d/{file_id}/edit?usp=sharing"
        
        return file_url
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ Google Drive: {e}")
        import traceback
        traceback.print_exc()
        return None

def sync_excel_from_gdrive():
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Excel-—Ñ–∞–π–ª–∞ —Å Google Drive –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not os.path.exists(GOOGLE_CRED_PATH):
            print("–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Google API –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        credentials = service_account.Credentials.from_service_account_file(
            GOOGLE_CRED_PATH, 
            scopes=['https://www.googleapis.com/auth/drive']
        )
        
        drive_service = build('drive', 'v3', credentials=credentials)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ Google Drive
        file_name = os.path.basename(OUTPUT_EXCEL_PATH)
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive
        response = drive_service.files().list(
            q=f"name='{file_name}' and trashed=false",
            spaces='drive',
            fields='files(id, name)'
        ).execute()
        
        if not response.get('files'):
            print(f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Google Drive")
            return False
            
        file_id = response.get('files')[0].get('id')
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        request = drive_service.files().get_media(fileId=file_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(OUTPUT_EXCEL_PATH):
            backup_path = f"{OUTPUT_EXCEL_PATH}.bak"
            try:
                os.rename(OUTPUT_EXCEL_PATH, backup_path)
                print(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å Google Drive
        with open(OUTPUT_EXCEL_PATH, 'wb') as f:
            downloader = MediaIoBaseDownload(f, request)
            done = False
            while not done:
                status, done = downloader.next_chunk()
                print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ {int(status.progress() * 100)}%")
                
        print(f"–§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω —Å Google Drive")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Drive: {e}")
        import traceback
        traceback.print_exc()
        return False

def update_brands_for_existing_products(xml_path, excel_path, product_ids):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è Brand –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ Excel –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ XML
    
    Args:
        xml_path (str): –ü—É—Ç—å –∫ XML-—Ñ–∞–π–ª—É
        excel_path (str): –ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É
        product_ids (list): –°–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
    Returns:
        bool: True, –µ—Å–ª–∏ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∏–Ω–∞—á–µ False
    """
    if not os.path.exists(xml_path) or not os.path.exists(excel_path):
        print(f"–§–∞–π–ª XML ({xml_path}) –∏–ª–∏ Excel ({excel_path}) –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
        
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
        df = pd.read_excel(excel_path)
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        changes_made = False
        
        # –ü–∞—Ä—Å–∏–º XML –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –±—Ä–µ–Ω–¥–æ–≤
        tree = ET.parse(xml_path)
        root = tree.getroot()
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –±—Ä–µ–Ω–¥–æ–≤
        brands_from_xml = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ XML
        for ad in root.findall("Ad"):
            ad_id_elem = ad.find("Id")
            brand_elem = ad.find("Brand")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Id –∏ Brand
            if ad_id_elem is not None and ad_id_elem.text is not None and brand_elem is not None and brand_elem.text is not None:
                ad_id = ad_id_elem.text
                brand = brand_elem.text
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö ID
                if ad_id in product_ids:
                    brands_from_xml[ad_id] = brand
                    print(f"–ò–∑ XML: —Ç–æ–≤–∞—Ä {ad_id}, –±—Ä–µ–Ω–¥: {brand}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ Excel
        for product_id in product_ids:
            if product_id in brands_from_xml:
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –≤ DataFrame
                product_mask = df['Id'].astype(str) == product_id
                if any(product_mask):
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –≤ Excel
                    excel_brand = df.loc[product_mask, 'Brand'].iloc[0]
                    xml_brand = brands_from_xml[product_id]
                    
                    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º
                    if excel_brand != xml_brand:
                        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: —Å '{excel_brand}' –Ω–∞ '{xml_brand}'")
                        df.loc[product_mask, 'Brand'] = xml_brand
                        changes_made = True
                    else:
                        print(f"–ë—Ä–µ–Ω–¥ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id} —Å–æ–≤–ø–∞–¥–∞–µ—Ç: '{excel_brand}'")
                else:
                    print(f"–¢–æ–≤–∞—Ä {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel")
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        if changes_made:
            df.to_excel(excel_path, index=False)
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏")
            return True
        else:
            print("–ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–æ–≤")
            return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def process_xml(use_gdrive_for_images=True):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ XML-—Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ Excel-—Ç–∞–±–ª–∏—Ü—ã"""
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Drive —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(OUTPUT_EXCEL_PATH):
        sync_excel_from_gdrive()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    output_dir = create_output_dir()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Drive API, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    gdrive_service = None
    if use_gdrive_for_images and os.path.exists(GOOGLE_CRED_PATH):
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            credentials = service_account.Credentials.from_service_account_file(
                GOOGLE_CRED_PATH, 
                scopes=['https://www.googleapis.com/auth/drive']
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Drive API
            gdrive_service = build('drive', 'v3', credentials=credentials)
            print("Google Drive API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Drive API: {e}")
            import traceback
            traceback.print_exc()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª Excel –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±—Ä–µ–Ω–¥—ã –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if os.path.exists(OUTPUT_EXCEL_PATH):
        # –°–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏ –≤ –ø–æ–ª–µ Brand
        problematic_product_ids = ['bz143', 'bz149', 'bz150']
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤
        update_result = update_brands_for_existing_products(
            LOCAL_XML_PATH, 
            OUTPUT_EXCEL_PATH, 
            problematic_product_ids
        )
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ Google Drive
        if update_result:
            print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤: –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ Excel –Ω–∞ Google Drive")
            file_url = upload_to_google_drive(OUTPUT_EXCEL_PATH, force_update=True)
            print(f"–¢–∞–±–ª–∏—Ü–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ Google Drive: {file_url}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª Excel —Å –¥–∞–Ω–Ω—ã–º–∏
    existing_ids = set()
    existing_products_with_missing_images = {}
    existing_data = None
    
    if os.path.exists(OUTPUT_EXCEL_PATH):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            existing_data = pd.read_excel(OUTPUT_EXCEL_PATH)
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ {OUTPUT_EXCEL_PATH}, —Å—Ç—Ä–æ–∫: {len(existing_data)}")
            
            if 'Id' in existing_data.columns:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Id
                existing_ids = set(existing_data['Id'].astype(str).tolist())
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(existing_ids)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ Excel-—Ñ–∞–π–ª–∞: {e}")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ XML
    tree = ET.parse(LOCAL_XML_PATH)
    root = tree.getroot()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ XML
    xml_ids = set()
    for ad in root.findall("Ad"):
        ad_id_elem = ad.find("Id")
        if ad_id_elem is not None and ad_id_elem.text is not None:
            xml_ids.add(ad_id_elem.text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ Excel –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ XML
    if existing_data is not None and len(existing_ids) > 0:
        removed_ids = existing_ids - xml_ids
        if removed_ids:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(removed_ids)} —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ XML:")
            for removed_id in removed_ids:
                print(f"- {removed_id}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
            existing_data = existing_data[~existing_data['Id'].astype(str).isin(removed_ids)]
            print(f"–£–¥–∞–ª–µ–Ω–æ {len(removed_ids)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel-—Ç–∞–±–ª–∏—Ü—ã")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            existing_data.to_excel(OUTPUT_EXCEL_PATH, index=False)
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {OUTPUT_EXCEL_PATH}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ Google Drive
            file_url = upload_to_google_drive(OUTPUT_EXCEL_PATH, force_update=True)
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ Google Drive")
    
    # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö
    print("–ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö...")
    unwanted_suffix = "</p><p>__________________________<br />–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã : 9.00-19.00<br />–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º–∏ –¢–ö –°–î–ï–ö BOXBERRY –Ø–Ω–¥–µ–∫—Å –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ DPD –ê–≤–∏—Ç–æ <br />–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π</p>"
    for ad in root.findall("Ad"):
        description = ad.find("Description")
        if description is not None and description.text:
            if description.text.endswith(unwanted_suffix):
                description.text = description.text[:-len(unwanted_suffix)]
                print(f"–£–¥–∞–ª–µ–Ω –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {ad.find('Id').text if ad.find('Id') is not None else '–±–µ–∑ ID'}")
            elif "</p><p>__________________________<br />" in description.text:
                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                start_idx = description.text.find("</p><p>__________________________<br />")
                if start_idx != -1:
                    # –£–¥–∞–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞
                    description.text = description.text[:start_idx] + "</p>"
                    print(f"–£–¥–∞–ª–µ–Ω —á–∞—Å—Ç–∏—á–Ω—ã–π –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {ad.find('Id').text if ad.find('Id') is not None else '–±–µ–∑ ID'}")
    
    # –°–±–æ—Ä –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –í–°–ï–• –æ–±—ä—è–≤–ª–µ–Ω–∏–π XML (–Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è)
    all_parameters = set()
    print("–°–±–æ—Ä –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    for ad in root.findall("Ad"):
        for elem in ad:
            all_parameters.add(elem.tag)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_parameters)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ XML")
    
    # –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
    standard_parameters = [
        "Id", "AdType", "Category", "Address", "ContactPhone", 
        "GoodsType", "ProductType", "SparePartType", "Title", 
        "Description", "Price", "Availability", "Condition", "Brand", "OEM",
        "TechnicSparePartType", "TransmissionSparePartType", "EngineSparePartType"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤ XML
    for param in standard_parameters:
        all_parameters.add(param)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    all_parameters.add("InternetCalls")
    all_parameters.add("CallsDevices")
    all_parameters.add("ImageUrls")
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ Images –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ –≤ Excel
    if "Images" in all_parameters:
        all_parameters.remove("Images")
        print("–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª–µ Images –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    print(f"–ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö: {len(all_parameters)}")
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    data = []
    
    # –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    processed_count = 0
    skipped_count = 0
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
    for ad in root.findall("Ad"):
        ad_id_elem = ad.find("Id")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ Id
        if ad_id_elem is None or ad_id_elem.text is None:
            continue
            
        ad_id = ad_id_elem.text
        
        # –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è Brand –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if ad_id in ['bz143', 'bz149', 'bz150']:
            brand_elem = ad.find("Brand")
            if brand_elem is not None and brand_elem.text:
                print(f"–¢–æ–≤–∞—Ä {ad_id} –∏–º–µ–µ—Ç –±—Ä–µ–Ω–¥ {brand_elem.text} –≤ XML")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
        if ad_id in existing_ids:
            skipped_count += 1
            print(f"–ü—Ä–æ–ø—É—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_id} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ)")
            continue
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if processed_count >= MAX_ITEMS:
            continue
            
        processed_count += 1
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_id} ({processed_count}/{MAX_ITEMS - skipped_count})")
        
        # –ó–∞–º–µ–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        description = ad.find("Description")
        if description is not None and description.text:
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {ad_id}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç CDATA
            if "<![CDATA[" in description.text and "]]>" in description.text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ CDATA
                cdata_start = description.text.find("<![CDATA[") + 9
                cdata_end = description.text.rfind("]]>")
                cdata_content = description.text[cdata_start:cdata_end]
                
                # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä "Lada;"
                lada_index = cdata_content.find("Lada;")
                if lada_index != -1:
                    print(f"–ù–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä 'Lada;' –≤ –ø–æ–∑–∏—Ü–∏–∏ {lada_index}")
                    # –í—Å–µ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ "Lada;"
                    new_cdata_content = cdata_content[:lada_index + 5] + NEW_DESCRIPTION + cdata_content[lada_index + 5:]
                    description.text = f"<![CDATA[{new_cdata_content}]]>"
                    print("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ 'Lada;'")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç "Lada;", –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π </p><p>
                    last_p_tag = cdata_content.rfind("</p><p>")
                    if last_p_tag != -1:
                        print(f"–ù–∞–π–¥–µ–Ω —Ç–µ–≥ </p><p> –≤ –ø–æ–∑–∏—Ü–∏–∏ {last_p_tag}")
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ </p><p>
                        tag_end = last_p_tag + len("</p><p>")
                        new_cdata_content = cdata_content[:tag_end] + NEW_DESCRIPTION + cdata_content[tag_end:]
                        description.text = f"<![CDATA[{new_cdata_content}]]>"
                        print("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Ç–µ–≥–∞ </p><p>")
                    else:
                        print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ 'Lada;', –Ω–∏ </p><p>. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü.")
                        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                        description.text = f"<![CDATA[{cdata_content}{NEW_DESCRIPTION}]]>"
            else:
                print("–¢–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç CDATA")
                # –ï—Å–ª–∏ –Ω–µ—Ç CDATA, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü
                lada_index = description.text.find("Lada;")
                if lada_index != -1:
                    print(f"–ù–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä 'Lada;' –≤ –ø–æ–∑–∏—Ü–∏–∏ {lada_index}")
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ "Lada;"
                    # –£–∂–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    description.text = description.text[:lada_index + 5] + NEW_DESCRIPTION + description.text[lada_index + 5:]
                    print("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ 'Lada;'")
                else:
                    print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü")
                    # –ï—Å–ª–∏ –Ω–µ—Ç "Lada;", –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                    description.text = description.text + NEW_DESCRIPTION
        
        # –°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        original_image_urls = process_images(ad, output_dir, ad_id, gdrive_service)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ URL –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        processed_image_urls = process_image_urls(original_image_urls, output_dir, ad_id, gdrive_service)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ –≤—Å–µ–º–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ |
        image_urls_string = "|".join(processed_image_urls) if processed_image_urls else "|".join(original_image_urls)
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
        row_data = {
            # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            param: "" for param in all_parameters
        }
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        for elem in ad:
            if elem.tag in row_data and elem.text is not None:
                # –û—á–∏—â–∞–µ–º CDATA –µ—Å–ª–∏ –µ—Å—Ç—å
                if "<![CDATA[" in elem.text and "]]>" in elem.text:
                    cdata_start = elem.text.find("<![CDATA[") + 9
                    cdata_end = elem.text.rfind("]]>")
                    row_data[elem.tag] = elem.text[cdata_start:cdata_end]
                else:
                    row_data[elem.tag] = elem.text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        row_data["InternetCalls"] = "–î–∞"
        row_data["CallsDevices"] = "6078268665"
        row_data["ImageUrls"] = image_urls_string
        
        data.append(row_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π XML
    output_xml_path = "avito_processed.xml"
    tree.write(output_xml_path, encoding="utf-8", xml_declaration=True)
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π XML —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_xml_path}")
    
    if not data:
        print("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        file_url = None
        if os.path.exists(OUTPUT_EXCEL_PATH):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –Ω–∞ Google Drive
            try:
                credentials = service_account.Credentials.from_service_account_file(
                    GOOGLE_CRED_PATH, 
                    scopes=['https://www.googleapis.com/auth/drive']
                )
                drive_service = build('drive', 'v3', credentials=credentials)
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ Google Drive
                file_name = os.path.basename(OUTPUT_EXCEL_PATH)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                response = drive_service.files().list(
                    q=f"name='{file_name}' and trashed=false",
                    spaces='drive',
                    fields='files(id, name)'
                ).execute()
                
                if response.get('files'):
                    file_id = response.get('files')[0].get('id')
                    file_url = f"https://docs.google.com/spreadsheets/d/{file_id}/edit?usp=sharing"
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: {e}")
        
        if file_url:
            return pd.DataFrame(), file_url
        else:
            return pd.DataFrame(), None
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    df = pd.DataFrame(data)
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º DataFrame
    print(f"–°–æ–∑–¥–∞–Ω DataFrame —Å {len(df)} —Å—Ç—Ä–æ–∫–∞–º–∏ –∏ {len(df.columns)} —Å—Ç–æ–ª–±—Ü–∞–º–∏")
    print("–°—Ç–æ–ª–±—Ü—ã –≤ DataFrame:")
    for i, col in enumerate(df.columns):
        print(f"{i+1}. {col}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ DataFrame –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    for param in standard_parameters:
        if param not in df.columns:
            print(f"–í–Ω–∏–º–∞–Ω–∏–µ: –°—Ç–æ–ª–±–µ—Ü '{param}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ DataFrame! –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ...")
            df[param] = ""  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü
    
    # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª
    excel_path, was_updated = save_to_excel(df)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ Google Drive —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
    if was_updated:
        file_url = upload_to_google_drive(excel_path, force_update=True)
        print(f"–¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ Google Drive")
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É
        file_url = upload_to_google_drive(excel_path, force_update=False)
        print(f"–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É")
    
    return df, file_url

# –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å Google Drive –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def process_xml_with_gdrive():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ XML-—Ñ–∞–π–ª–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ Google Drive"""
    return process_xml(use_gdrive_for_images=True)

def add_image(product_id, image_url, output_dir=None, gdrive_service=None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–æ–≤–∞—Ä—É –≤ Excel-—Ç–∞–±–ª–∏—Ü–µ
    
    Args:
        product_id (str): ID —Ç–æ–≤–∞—Ä–∞
        image_url (str): URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        output_dir (str, optional): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        gdrive_service (object, optional): –°–µ—Ä–≤–∏—Å Google Drive –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
    Returns:
        bool: True, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
    """
    if output_dir is None:
        output_dir = create_output_dir()
        
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
        if not os.path.exists(OUTPUT_EXCEL_PATH):
            print(f"–§–∞–π–ª {OUTPUT_EXCEL_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        existing_data = pd.read_excel(OUTPUT_EXCEL_PATH)
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID
        product_mask = existing_data['Id'] == product_id
        if not any(product_mask):
            print(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ")
            return False
            
        product_index = existing_data.index[product_mask][0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        current_images = existing_data.at[product_index, 'ImageUrls']
        current_images = str(current_images) if pd.notna(current_images) else ""
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ad_element —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ process_image_urls
            image_urls = [image_url]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            processed_images = process_image_urls(image_urls, output_dir, product_id, gdrive_service)
            
            if not processed_images:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_url}")
                return False
                
            # –ü–æ–ª—É—á–∞–µ–º URL –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            processed_url = processed_images[0]
            
            # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—â–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if not current_images or current_images == "nan" or current_images.strip() == "":
                existing_data.at[product_index, 'ImageUrls'] = processed_url
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                image_list = current_images.split("|")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ª–∏ URL (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ)
                if processed_url not in image_list:
                    image_list.append(processed_url)
                    existing_data.at[product_index, 'ImageUrls'] = "|".join(image_list)
                else:
                    print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {processed_url} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ Excel
            existing_data.to_excel(OUTPUT_EXCEL_PATH, index=False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ Google Drive
            upload_to_google_drive(OUTPUT_EXCEL_PATH)
            
            print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–æ–≤–∞—Ä—É {product_id}")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä—É {product_id}: {e}")
        return False

def update_all_brands():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤ –≤ Excel-—Ñ–∞–π–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ XML.
    –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
    """
    print(f"–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤: {datetime.now()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(LOCAL_XML_PATH) or not os.path.exists(OUTPUT_EXCEL_PATH):
        print(f"–§–∞–π–ª XML ({LOCAL_XML_PATH}) –∏–ª–∏ Excel ({OUTPUT_EXCEL_PATH}) –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é XML
        download_success = download_xml()
        if not download_success:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å XML, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Drive
        sync_excel_from_gdrive()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
        df = pd.read_excel(OUTPUT_EXCEL_PATH)
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        changes_made = False
        
        # –ü–∞—Ä—Å–∏–º XML –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –±—Ä–µ–Ω–¥–æ–≤
        tree = ET.parse(LOCAL_XML_PATH)
        root = tree.getroot()
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –±—Ä–µ–Ω–¥–æ–≤
        brands_from_xml = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ XML
        print("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–µ–Ω–¥–∞—Ö –∏–∑ XML...")
        for ad in root.findall("Ad"):
            ad_id_elem = ad.find("Id")
            brand_elem = ad.find("Brand")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Id –∏ Brand
            if ad_id_elem is not None and ad_id_elem.text is not None and brand_elem is not None and brand_elem.text is not None:
                ad_id = ad_id_elem.text
                brand = brand_elem.text
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–µ–Ω–¥
                brands_from_xml[ad_id] = brand
        
        print(f"–°–æ–±—Ä–∞–Ω–æ {len(brands_from_xml)} –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ XML")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ Excel
        updated_count = 0
        for index, row in df.iterrows():
            product_id = str(row['Id'])
            
            if product_id in brands_from_xml:
                excel_brand = str(row['Brand']) if pd.notna(row['Brand']) else ""
                xml_brand = brands_from_xml[product_id]
                
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º
                if excel_brand != xml_brand:
                    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: —Å '{excel_brand}' –Ω–∞ '{xml_brand}'")
                    df.at[index, 'Brand'] = xml_brand
                    changes_made = True
                    updated_count += 1
        
        print(f"–í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {updated_count}")
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        if changes_made:
            df.to_excel(OUTPUT_EXCEL_PATH, index=False)
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive
            file_url = upload_to_google_drive(OUTPUT_EXCEL_PATH, force_update=True)
            print(f"–¢–∞–±–ª–∏—Ü–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ Google Drive: {file_url}")
            return True
        else:
            print("–í—Å–µ –±—Ä–µ–Ω–¥—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def job():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now()}")
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é Excel
    sync_excel_from_gdrive()
    
    if download_xml():
        # –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–µ–Ω–¥—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        problematic_product_ids = ['bz143', 'bz149', 'bz150']
        update_brands_for_existing_products(LOCAL_XML_PATH, OUTPUT_EXCEL_PATH, problematic_product_ids)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        df, file_url = process_xml_with_gdrive()
        print(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {file_url}")
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now()}")

def check_gdrive_storage():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ Google –î–∏—Å–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–æ—Ç–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not os.path.exists(GOOGLE_CRED_PATH):
            print("–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Google API –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        credentials = service_account.Credentials.from_service_account_file(
            GOOGLE_CRED_PATH, 
            scopes=['https://www.googleapis.com/auth/drive']
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Drive API
        drive_service = build('drive', 'v3', credentials=credentials)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        about = drive_service.about().get(fields='storageQuota').execute()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–≤–æ—Ç–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_quota = about.get('storageQuota', {})
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        def format_size(size_bytes):
            if size_bytes is None:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            if isinstance(size_bytes, str):
                try:
                    size_bytes = int(size_bytes)
                except ValueError:
                    return size_bytes
            
            # –†–∞–∑–º–µ—Ä—ã –≤ –±–∞–π—Ç–∞—Ö
            for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë', '–¢–ë']:
                if size_bytes < 1024.0 or unit == '–¢–ë':
                    break
                size_bytes /= 1024.0
            return f"{size_bytes:.2f} {unit}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        usage = storage_quota.get('usage')
        usage_in_drive = storage_quota.get('usageInDrive')
        usage_in_trash = storage_quota.get('usageInTrash')
        limit = storage_quota.get('limit')
        
        formatted_data = {
            '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ_–≤—Å–µ–≥–æ': format_size(usage),
            '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ_–Ω–∞_–¥–∏—Å–∫–µ': format_size(usage_in_drive),
            '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ_–≤_–∫–æ—Ä–∑–∏–Ω–µ': format_size(usage_in_trash),
            '–æ–±—â–∏–π_–ª–∏–º–∏—Ç': format_size(limit),
        }
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç
        if limit is not None and usage is not None:
            try:
                limit_int = int(limit)
                usage_int = int(usage)
                free_space = limit_int - usage_int
                formatted_data['—Å–≤–æ–±–æ–¥–Ω–æ'] = format_size(free_space)
                formatted_data['–∑–∞–ø–æ–ª–Ω–µ–Ω–æ_–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤'] = f"{(usage_int / limit_int * 100):.2f}%"
            except (ValueError, ZeroDivisionError):
                formatted_data['—Å–≤–æ–±–æ–¥–Ω–æ'] = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å"
                formatted_data['–∑–∞–ø–æ–ª–Ω–µ–Ω–æ_–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤'] = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å"
        
        return formatted_data
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Google Drive: {e}")
        import traceback
        traceback.print_exc()
        return None

def display_gdrive_storage_info():
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–±–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –Ω–∞ Google –î–∏—Å–∫–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    """
    storage_info = check_gdrive_storage()
    
    if storage_info is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Google Drive.")
        return
    
    print("\n====== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Google Drive ======")
    print(f"–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {storage_info.get('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ_–≤—Å–µ–≥–æ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–∞ –¥–∏—Å–∫–µ: {storage_info.get('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ_–Ω–∞_–¥–∏—Å–∫–µ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {storage_info.get('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ_–≤_–∫–æ—Ä–∑–∏–Ω–µ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"–û–±—â–∏–π –ª–∏–º–∏—Ç: {storage_info.get('–æ–±—â–∏–π_–ª–∏–º–∏—Ç', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"–°–≤–æ–±–æ–¥–Ω–æ: {storage_info.get('—Å–≤–æ–±–æ–¥–Ω–æ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {storage_info.get('–∑–∞–ø–æ–ª–Ω–µ–Ω–æ_–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print("================================================\n")

# –†–∞—Å—à–∏—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é main –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] == "--update-brands":
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤
            print("–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤")
            update_all_brands()
            return
        elif sys.argv[1] == "--check-storage":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ Google Drive
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ Google Drive")
            display_gdrive_storage_info()
            return
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ
    job()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∫–∞–∂–¥—ã–π —á–∞—Å)
    schedule.every(1).hours.do(job)
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    main()
